using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.Numerics;

namespace xeuclid
{
    class Program
    {

        public_key public_Key_Ford, public_Key_Arthur;


        // Algorithmus Source:
        // https://assignmentshark.com/blog/extended-euclidean-algorithm-example/
        static void Main(string[] args)
        {

            RSASolver rsaSolver = new RSASolver();
            Console.WriteLine("Aufgabe 1: ");
            rsaSolver.Solve(Arthurs_Key_Aufgabe1(), Fords_Key_Aufgabe1());
            Console.WriteLine("Aufgabe 2: ");
            rsaSolver.Solve(Arthurs_Key_Aufgabe2(), Fords_Key_Aufgabe2());

            Console.ReadKey();
        }

        static public_key Arthurs_Key_Aufgabe1()
        {
            return new public_key()
            {
                N = 221,
                e = 55
            };
        }

        static public_key Fords_Key_Aufgabe1()
        {
            return new public_key()
            {
                N = 391,
                e = 3
            };
        }

        static public_key Arthurs_Key_Aufgabe2()
        {
            return new public_key()
            {
                N = BigInteger.Parse("22110353244313571990253947726448700077443799253406660177539041122286765386297310000624571255327108496704433541802282181077577052293207873618616856325300481078151287575967405833226335344276559322617210444468625925561175939075849496718494786067062535178871669751762240085850774614288584598896914586928107067984493428904565220859347561525719531741217278287666243358923774175067649151386827137528823240283946807493177939741504278807764069512011353961858632308604834276891354166708590024569596034499839659092216324314789282948363742579018085735215693697393708782328192259892300038044916383109648663926619841075984159391291"),
                e = 65537
            };
        }

        static public_key Fords_Key_Aufgabe2()
        {
            return new public_key()
            {
                N = BigInteger.Parse("8426787171468382497075769357030611980814685788816257398102710770897246707635297760774759792373215209813848976420620420784548514222696366158140174407697178456459496638227776376886099407473515210480211767300220008668414377545044685658970131856283919959367080468375610676782674134025062853802165025709299151440079688790957995816451657881792767625455020761844813293082113111815333796507322859004543179840288109175394621725262012835735899917596920833597957719961691988259685474684646672054835590480479532791649613390772338664115220731756733799369417161132341744402629093797964181079824578424248571013550675119181587766747"),
                e = 65537
            };
        }

    }
}
